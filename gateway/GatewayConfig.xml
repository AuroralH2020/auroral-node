<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<general>
		<!--
		Domain name of the communication server. If not set, the application exits.
		This value can't be just an IP address if encryption is to be used.

		DEV 	- development.vicinity.ws
		PROD 	- commserver.vicinity.ws

		-->
		<server>auroral.dev.bavenir.eu</server>


		<!--
		Port of the communication server.

		Defaults to 5222.eeab9e97
		-->
		<port>5222</port>

		<!--
		This parameter represents a URL to Neighbourhood Manager API. This value
		can't be just an IP address.

		DEV 	- api.vicinity.dev.bavenir.eu
		PROD 	- api.vicinity.bavenir.eu

		-->
		<neighbourhoodManagerServer>auroral.dev.bavenir.eu</neighbourhoodManagerServer>

		<!--
		Port on which the NM listens for incoming requests.

		Default is 3000.
		-->
		<neighourhoodManagerPort>443</neighourhoodManagerPort>

		<!-- 
		Base URI for connecting the NM from the gateway
		
		Default is /api/gtw/v1/ (AURORAL) or /commserver/ (VICINITY/SHARQ)
		-->
		<neighourhoodManagerBaseUri>/api/gtw/v1/</neighourhoodManagerBaseUri>

		<!--
		Setting this parameter to true will enable encryption of communication.
		The policy is to try the strongest mechanisms first.

		Setting it to false will disable the encryption (not
		recommended, only for debug purposes). Default is true.
		-->
		<encryption>true</encryption>

		<!--
		Number of seconds to consider request message as no longer relevant.
		After a request is sent from point A to point B, point A waits for
		response. If the response does not arrive until this timeout expires,
		point B is considered unreachable. If the response arrives after this
		happens, the response is ignored and discarded and a new request has
		to be sent.

		IMPORTANT: Please take into account also the fact that another
		timeout is in the game, the timeout of Agent connector on the remote
		OGWAPI. If the administrator of the remote OGWAPI knows that a call to
		his/her Agent takes a long time, and subsequently sets the Agent timeout
		to 120 seconds, your 90 seconds message timeout may not be sufficient to
		cover the request. Watch the logs.

		Default is 90 seconds.
		-->
		<requestMessageTimeout>90</requestMessageTimeout>


		<!--
		This parameter defines how the sessions that went down should be recovered.
		A session is a connection created when individual object logs in and the
		OGWAPI tries as much as possible to keep it open.

		However there are cases when the OGWAPI will give up its attempts to
		maintain the session, e.g. when the communication with server is
		interrupted for prolonged time (depends on engine in use). In such cases
		there usually is a need to recover the sessions after communication is
		restored. 'Aggressiveness' of OGWAPI required to recover lost sessions is
		scenario dependent. Following are accepted values for this parameter,
		along with explanations:


		proactive

		After you log your objects in and a session will go down for some reason,
		OGWAPI will be trying hard to reconnect every 30 seconds until it succeeds
		or until you log your objects out. It does not care if your object is
		ready to listen to incoming requests or not. Incoming requests may
		therefore still time out if your adapter is not ready, although it will
		look online in the infrastructure. Good for objects that are expected
		to be always online and will likely be ready to respond, e.g. VAS or
		other services.
		NOTE OF CAUTION: When you are testing (or better said debugging...) your
		scenarios on two machines with identical credentials, the machine that
		runs OGWAPI with this parameter set to 'proactive' will keep stealing
		your connection. If both of them are configured to do so, it will produce
		plenty of exceptions.


		none

		The OGWAPI will not make any extra effort to recover the sessions.
		If you log your object in and the session for some reason fails, it will
		remain so until you explicitly re-log your object. This was the original
		behaviour in previous versions of OGWAPI.


		passive

		This will make OGWAPI terminate (!) sessions that are not refreshed
		periodically. Refreshing a connection means calling the login method at
		least every 30 seconds by default, although this number can be altered
		with sessionExpiration parameter.
		Call to login method is optimised, so there is no
		overhead and it will not attempt to actually log an object in if it already
		is. Good for integrators that like to have things under control, implement
		adapters on small end user devices or have a need to implement a kind of
		presence into their application.

		Default is proactive.

		-->
		<sessionRecovery>proactive</sessionRecovery>

		<!--
		When sessionRecovery is set to passive, use this to set the interval
		after which a connection without refreshing will be terminated.

		Note that this can't be smaller number than 5 seconds.

		Default is 30 seconds.
		-->
		<sessionExpiration>30</sessionExpiration>

		<!--
		This parameter represents a path to directory for storing data.

		Default is 'data/' inside the directory where the OGWAPI is run.
		-->
		<dataDirectory>data/</dataDirectory>

		<!--
		This parameter is for debug reason.
		Default is true.
		-->
		<loadTDFromServer>true</loadTDFromServer>

	</general>


	<actions>

		<!--
		This parameter sets how long (in minutes) after successful or failed
		execution a task's return value should be retained. In other words, if a
		task is finished or failed, its return value will be deleted from the
		OGWAPI after this number of minutes. This is to prevent the return
		values from piling up in the device's memory.

		If not set, it defaults to 1440 minutes (24 hours).
		-->
		<timeToKeepReturnValues>1440</timeToKeepReturnValues>


		<!--
		If a task is pending to be run, how long (in minutes) it should remain in the
		queue before being tagged as failed by timing out. This is infrastructure
		specific - if a task usually takes hours to complete, this value should
		be set to higher number. If it takes only a few seconds,
		it usually makes no sense to wait for more than an hour. Again, it
		highly depends on what the action is about and integrator's common sense.

		Default value is 120 minutes (2 hours).
		-->
		<pendingTaskTimeout>120</pendingTaskTimeout>


		<!--
		Maximum number of tasks being queued in pending status, waiting to be
		run. This depends on number of objects that are connecting via this
		gateway, and the memory size of the device it runs on. Setting a
		limit prevents a malicious object to fill the memory with pending
		requests. Note that is a limit per action, so if you have two
		actions that can be executed on your local object,
		maximum number of pending tasks in memory will be twice this number.

		Default is 128.
		-->
		<maxNumberOfPendingTasks>128</maxNumberOfPendingTasks>


	</actions>

	<logging>
		<!--
		Set a relative or absolute (recommended) path to log file.
		In order to differentiate among multiple log files, a '%s' can be added
		to arbitrary location in the string, which will be replaced by a time
		stamp during start. Each start of the Gateway will produce a new log file
		with a new time stamp.
		-->
		<file>log/%s-gateway.log</file>

		<!--
		Set a log level - messages with severity level lower than this setting
		will not be recorded. The list of levels in descending order is
		following:

		OFF
		SEVERE
		WARNING
		INFO
		CONFIG
		FINE
		FINER
		FINEST

		It corresponds with the levels used by class java.util.logging.Logger,
		which the Vicinity Gateway utilises for event logging. This value can also
		be set to OFF, which will disable the logging mechanism completely.
		-->
		<level>INFO</level>

		<!--
		Setting this value to 'true' will cause the application to log its output
		to console, aside from logging it into file. This can be useful when
		debugging the software.

		Setting it to 'false' will suppress this behaviour, instead logging
		events solely to log file. This is the default behaviour.
		-->
		<consoleOutput>true</consoleOutput>

				<!-- 
		Enable rotation of log files
		If enabled, it is possible to specify max size of file and number of files to keep
		Defaults TRUE
		-->
		<logRotation>true</logRotation>

		<!-- 
		Maximum size of a log size. Once the size is reached, a new file is opened.
		Old files are stored until max number of files is reached (See below)
		Size is defined in bytes
		Defaults 10MB = 10485760
		-->
		<maxLogSize>10485760</maxLogSize>

		<!-- 
		Max number of rotated files that are stored
		After max number is reached old files will be deleted
		Defaults 7 files
		-->
		<maxNumFiles>7</maxNumFiles>
		
	</logging>


	<xmpp>

		<!--
		XMPP domain that is served by the server. Defaults to vicinity.ws.
		-->
		<domain>auroral.dev.bavenir.eu</domain>

		<!--
		Enables debugging of the XMPP communication between the Gateway and the
		server / other Gateways. Note that this is to be used in conjunction
		with the SMACK debugger, which is external tool.
		See http://download.igniterealtime.org/smack/docs/latest/documentation/debugging.html.

		Default is false.
		-->
		<debugging>false</debugging>

	</xmpp>

	<api>
		<!--
		Set the port on which the API will be served. If not explicitly set,
		it defaults to 8181. Be aware that running the software on privileged
		ports (<1024) needs root's privileges.
		-->
		<port>8181</port>

		<!--
		Set whether the API will be served via HTTP or HTTPS. Takes either true
		or false value. Default is false.
		-->
		<enableHttps>false</enableHttps>

		<!--
		Path to the keystore file. This parameter is only read when the
		enableHttps parameter is set to true. If it is, but there is no keystore
		file specified, it will default to 'keystore/ogwapi.keystore' in the
		installation directory of OGWAPI.
		-->
		<keystoreFile>keystore/ogwapi.keystore</keystoreFile>

		<!--
		Password for the keystore. This parameter is only read when the
		enableHttps parameter is set to true. No defaults are specified, so watch
		for exceptions.
		-->
		<keystorePassword>password</keystorePassword>

		<!--
		Password for the key. This parameter is only read when the
		enableHttps parameter is set to true. No defaults are specified, so watch
		for exceptions.
		-->
		<keyPassword>password</keyPassword>

		<!--
		The type of the keystore. The default (and recommended) type is PKCS12.
		-->
		<keystoreType>PKCS12</keystoreType>

		<!--
		Authentication realm for the RESTLET BEARER authentication schema. It
		is only taken into account if the authMethod is set to bearer.

		Defaults to bavenir.eu.
		-->
		<authRealm>bavenir.eu</authRealm>

		<!--
		Authentication method for objects logging into the Gateway API. Following
		methods are valid:

		basic	-	Basic HTTP authentication standard.

		digest	-	Digest HTTP authentication standard.

		bearer	-	Token authentication (JWT/OAuth)

		none	-	No authentication. Experimental, for debugging purposes only.
					Without authentication, there is no way of logging into the
					network other than hard coded credentials (or other
					kind of customisation).

		Defaults to basic.

		-->
		<authMethod>basic</authMethod>

	</api>


	<connector>
		<restAgentConnector>

			<!--
			If there is a need to test the OGWAPI responsiveness to external requests
			without making real calls to local REST Agent, setting this parameter
			to 'true' will make OGWAPI perform only simulated calls.

			Defaults to false.
			-->
			<useDummyCalls>false</useDummyCalls>

			<!--
			Whether or not the OGWAPI should attempt to use HTTPS to connect to the REST
			Agent.

			Defaults to false.
			-->
			<useHttps>false</useHttps>

			<!--
			Setting this to true will make OGWAPI accept self signed certificates
			('snake oil') from the REST Agent. Please note that this does not mean
			it will ignore certificate errors! If the Agent is running on localhost,
			OGWAPI will still refuse connection to an Agent with self signed
			certificate with e.g. CN=mymachine.eu (because it will look for CN=localhost).

			Default is true.
			-->
			<acceptSelfSignedCertificate>true</acceptSelfSignedCertificate>

			<!--
			If the Agent requests authentication, set this parameter to appropriate
			value. Accepted values are:

			none - The Agent does not request authentication.

			basic - The Agent requests authentication, the method is Basic HTTP.

			NOTE: For now, no more authentication methods are supported.

			Default is none.
			-->
			<agentAuthenticationMethod>none</agentAuthenticationMethod>

			<!--
			User name for authentication with Agent.
			-->
			<agentUsername>username</agentUsername>

			<!--
			Password for authentication with Agent.
			-->
			<agentPassword>password</agentPassword>

			<!--
			Number of seconds the OGWAPI is supposed to wait for an answer from
			the Agent.

			Default is 60, as in most of the HTTP clients.
			-->
			<agentTimeout>60</agentTimeout>

			<!--
			If the REST Agent listens on a different interface (or a different machine),
			it is necessary to set its address with this parameter (both IP and name
			are accepted).

			Defaults to localhost. In DOCKER use BRIDGE connection
			-->
			<agent>proxy</agent>

			<!--
			Port on which the REST Agent listens.

			Defaults to 9997.
			-->
			<agentPort>9997</agentPort>

		</restAgentConnector>

	</connector>


	<search>
		<sparql>
			<!--
			URL of the Gateway API Service facilitating the SPARQL search. Usually
			there is no need to change this, unless informed that it is necessary.
			-->
			<gwApiServicesUrl>http://vicinity-gateway-services.vicinity.linkeddata.es/advanced-discovery</gwApiServicesUrl>
		</sparql>

		<semantic>
			<!--
			This parameter represents a URL path to Semantic Search API.
			-->
			<semanticSearchAPI>http://repo.sharq.se.rwth-aachen.de/search/</semanticSearchAPI>
		</semantic>
	</search>
	<messageCounter>
		<countOfRecords>
			<!--
			The number of records that are sent to NM
			-->
			50
		</countOfRecords>
	</messageCounter>

	<platformSecurity>
		<enable>
			<!--
			Tries to authenticate the gateway into the platform, if disabled the
			gateway functions in anonymous mode and restrictions might apply (true or false)
			-->
			true
		</enable>
		<identity>
			<!--
			AGID of the Access Point used to authenticate the gateway (AGID string)
			-->
			{your-agid-here}
		</identity>
		<ttl>
			<!--
			Token time to live. Sets duration of the authentication token validity.
			Default is one week. It is set in milliseconds.
			 -->
			 604800000
		</ttl>
		<path>
			<!-- Security files path -->
			keystore/
		</path>
		<privkey>
			<!-- Private Key file name -->
			platform-key.der
		</privkey>
		<pubkey>
			<!-- Public Key file name -->
			platform-pubkey.der
		</pubkey>
	</platformSecurity>

</configuration>
